#! /usr/bin/env python

import time

import pygame
import pygame.sprite
from pygame.locals import * #the KeyboardController needs these

import events
import catan
import mapmodel

tileGroup = pygame.sprite.RenderUpdates()
tileModelToSprite = {}
cornerGroup = pygame.sprite.RenderUpdates()
cornerModelToSprite = {}

class EasySprite(pygame.sprite.Sprite):
    def __getattr__(self, attrname):
        try:
            return pygame.sprite.Sprite.__getattribute__(self, attrname)
        except AttributeError:
            if hasattr(self.rect, attrname):
                return getattr(self.rect, attrname)
            raise

    def __setattr__(self, attrname, val):
        try:
            return pygame.sprite.Sprite.__setattr__(self, attrname, val)
        except AttributeError:
            if hasattr(self.rect, attrname):
                return setattr(self.rect, attrname, val)
            raise

def vect_add(v1, v2):
    return v1[0]+v2[0], v1[1]+v2[1]
    
def vect_diff(v1, v2):
    return v1[0]-v2[0], v1[1]-v2[1]

def vect_mult(v1, v2):
    return v1[0]*v2[0], v1[1]*v2[1]

def vect_scal_mult(v1, s):
    return v1[0]*s, v1[1]*s


#------------------------------------------------------------------------------
def walk_corners_along_tile(tile, visitFn, firstCorner=None):
    corners = tile.corners[:] # copy

    if firstCorner:
        corner = firstCorner
        corners.remove(corner)
    else:
        corner = corners.pop(0)
    visitFn(corner, None)

    while corners:
        for edge in corner.edges:
            if tile not in edge.tiles:
                continue

            nextCorner = (edge.corners - [corner])[0]
            if set(edge.corners) == set(corner, nextCorner):
                continue

            corner = nextCorner
            corners.remove(corner)
            visitFn(corner, edge)
            break


#------------------------------------------------------------------------------
class CPUSpinnerController:
    def __init__(self):
        events.registerListener( self )
        self.keepGoing = 1

    def run(self):
        while self.keepGoing:
            events.post(events.Tick())

    def onQuit(self):
        #this will stop the while loop from running
        self.keepGoing = False

#------------------------------------------------------------------------------
class KeyboardController:
    """KeyboardController takes Pygame events generated by the
    keyboard and uses them to control the model, by sending Requests
    or to control the Pygame display directly, as with the QuitEvent
    """
    def __init__(self, playerName=None):
        '''playerName is an optional argument; when given, this
        keyboardController will control only the specified player
        '''
        events.registerListener( self )

        self.activePlayer = None
        self.playerName = playerName
        self.players = []

    def onTick(self):
        #Handle Input Events
        for event in pygame.event.get():
            ev = None
            if event.type == QUIT:
                ev = events.Quit()
            elif event.type == KEYDOWN:
                if event.key == K_ESCAPE:
                    ev = events.Quit()

            if ev:
                events.post( ev )


#------------------------------------------------------------------------------
class Tile(EasySprite):
    def __init__(self, tile):
        EasySprite.__init__(self)
        self.image = pygame.Surface( (100,100) )
        self.rect = self.image.get_rect()
        self.dirty = True
        r = self.rect

        #self.image.fill( (0,255,128) )
        font = pygame.font.Font(None, 20)
        text = tile.name
        textImg = font.render(text, 1, (255,0,0))
        self.image.blit( textImg, r.center )

        self.tile = tile
        self.calcCornerPositions()

        tileGroup.add(self)
        tileModelToSprite[tile] = self

    def calcCornerPositions(self):
        r = self.rect
        We = r.midleft
        NW = (r.width/3, r.top)
        NE = (2*r.width/3, r.top)
        Ea = r.midright
        SE = (2*r.width/3, r.bottom)
        SW = (r.width/3, r.bottom)
        if self.tile.name == 't01':
            self.cornerPositions = [ NW, We, NE, SW, Ea, SE ]
        elif self.tile.name in ['t02','t10']:
            self.cornerPositions = [ Ea, SE, NE, SW, NW, We ]
        elif self.tile.name in ['t03']:
            self.cornerPositions = [ SW, SE, We, Ea, NW, NE ]
        elif self.tile.name in ['t04']:
            self.cornerPositions = [ NE, Ea, NW, SE, We, SW ]
        elif self.tile.name in ['t05']:
            self.cornerPositions = [ We, SW, NW, SE, NE, Ea ]
        elif self.tile.name in ['t06']:
            self.cornerPositions = [ NW, NE, We, Ea, SW, SE ]
        elif self.tile.name in ['t07']:
            self.cornerPositions = [ NW, We, NE, SW, Ea, SE ]
        elif self.tile.name in ['t08']:
            self.cornerPositions = [ SE, SW, Ea, We, NE, NW ]
        elif self.tile.name in ['t09']:
            self.cornerPositions = [ Ea, NE, SE, NW, SW, We ]
        elif self.tile.name in ['t11']:
            self.cornerPositions = [ SW, We, SE, NW, Ea, NE ]
        elif self.tile.name in ['t12']:
            self.cornerPositions = [ SW, SE, We, Ea, NW, NE ]
        elif self.tile.name in ['t13']:
            self.cornerPositions = [ NE, NW, Ea, We, SE, SW ]
        elif self.tile.name in ['t14']:
            self.cornerPositions = [ NE, Ea, NW, SE, We, SW ]
        elif self.tile.name in ['t15']:
            self.cornerPositions = [ We, NW, SW, NE, SE, Ea ]
        elif self.tile.name in ['t16']:
            self.cornerPositions = [ We, SW, NW, SE, NE, Ea ]
        elif self.tile.name in ['t17']:
            self.cornerPositions = [ NW, We, NE, SW, Ea, SE ]
        elif self.tile.name in ['t18']:
            self.cornerPositions = [ NW, NE, We, Ea, SW, SE ]
        elif self.tile.name in ['t19']:
            self.cornerPositions = [ NW, We, NE, SW, Ea, SE ]
        else:
            raise Exception('too many tiles')

    def update(self):
        if not self.dirty:
            return

        #self.image.fill( (0,255,128) )
        font = pygame.font.Font(None, 20)
        text = self.tile.name
        textImg = font.render(text, 1, (255,0,0))
        self.image.blit(textImg, (self.rect.width/2, self.rect.height/2) )
        for i, c in enumerate(self.tile.corners):
            corner = cornerModelToSprite[c]
            corner.rect.center = self.cornerPositions[i]
            corner.rect.clamp_ip(self.image.get_rect())
            self.image.blit(corner.image, corner.rect.topleft)
        #for i, e in enumerate(self.tile.edges):
            #font = pygame.font.Font(None, 15)
            #text = e.name
            #textImg = font.render(text, 1, (0,0,255))
            #if len(e.corners) == 2:
                #c1, c2 = e.corners
                #corner = cornerModelToSprite[c1]
                #pos1 = corner.rect.center
                #corner = cornerModelToSprite[c2]
                #pos2 = corner.rect.center
                #pygame.draw.aaline(self.image, (0,0,255), pos1, pos2)
                #r = pygame.Rect(pos1[0], pos1[1],
                                #(pos2[0] - pos1[0]), (pos2[1] - pos1[1]))
                #self.image.blit(textImg, r.center)
            #else:
                #self.image.blit(textImg, (40,14*i))
        self.dirty = False
                

#------------------------------------------------------------------------------
class Corner(EasySprite):
    def __init__(self, corner):
        print 'making corner', corner.name
        EasySprite.__init__(self)
        self.image = pygame.Surface( (22,22) )
        self.rect = self.image.get_rect()
        r = self.rect

        self.image.fill( (0,255,28) )
        font = pygame.font.Font(None, 15)
        text = corner.name
        textImg = font.render(text, 1, (5,0,0))
        self.image.blit( textImg, r.topleft )

        self.corner = corner
        cornerGroup.add(self)
        cornerModelToSprite[corner] = self

#------------------------------------------------------------------------------
class Edge(EasySprite):
    def __init__(self, edge):
        print 'making edge', edge.name
        EasySprite.__init__(self)
        if len(edge.corners) != 2:
            print '??'
            return
        c1, c2 = e.corners
        corner = cornerModelToSprite[c1]
        r1 = corner.rect
        corner = cornerModelToSprite[c2]
        r2 = corner.rect

        self.rect = pygame.Rect(r1.center, vect_diff(r1.center, r2.center))
        norm_rect = self.rect.move(0,0)
        norm_rect.normalize()
        self.image = pygame.Surface(self.rect)

        pygame.draw.aaline(self.image, (0,0,255),
                           vect_diff(self.rect.topleft, norm_rect.topleft),
                           vect_diff(self.rect.bottomright, norm_rect.topleft))

#------------------------------------------------------------------------------
class PygameView:
    def __init__(self):
        events.registerListener( self )

        pygame.init()
        self.window = pygame.display.set_mode( (800,740) )
        pygame.display.set_caption( 'TITLE HERE' )

        self.background = pygame.Surface( self.window.get_size() )
        self.background.fill( (0,0,0) )

        self.window.blit( self.background, (0,0) )
        pygame.display.flip()


    #----------------------------------------------------------------------
    def showMap(self):
        # clear the screen first
        self.background.fill( (0,0,0) )
        self.window.blit( self.background, (0,0) )
        pygame.display.flip()

        catan.init()
        board = catan.game.board

        center = self.window.get_rect().center

        row = 0
        column = 0
        tiles = board.tiles[:] # copy
        while tiles:
            t = tiles.pop(0)
            tSprite = Tile(t)
            tSprite.center = center
            x = 300 + tSprite.tile.graphicalPosition[0]*75
            # minus because pygame uses less = up in the y dimension
            y = 300 - tSprite.tile.graphicalPosition[1]*55
            tSprite.rect.move_ip(x,y)
        for c in catan.mapmodel.allCorners:
            corner = Corner(c)

    #----------------------------------------------------------------------
    def draw(self):
        self.window.blit( self.background, (0,0) )

        for tile in tileGroup:
            tile.update()
            dirtyRects = tileGroup.draw( self.window )

        pygame.display.flip()
        time.sleep(1)

    #----------------------------------------------------------------------
    def onStartGame(self):
        self.showMap()

    #----------------------------------------------------------------------
    def onTick(self):
        self.draw()

class BoardDisplay(object):
    def __init__(self, board):
        self.board = board
        self.tiles = []
        for t in self.board.tiles:
            tSprite = Tile(t)
            self.tiles.append(tSprite)

    def align_to_center(self, centerPos):
        visitedCorners = []
        visitedEdges = []
        cornSprites = []
        remainingTiles = mapmodel.allTiles

        tSprite1 = self.tiles[0]
        tile = tSprite1.tile
        tSprite1.center = center
        tSprite.calcCornerPositions()
        remainingTiles.remove(tile)

        cornPosIdx = 0

        def visitFn(corner, edge):
            cornPosIdx += 1
            if edge and set.issubset(edge.corners, visitedCorners):
                return

            cSprite = Corner(corner)
            cSprite.center = tSprite1.cornerPositions[cornPosIdx]
            cornSprites.append(cSprite)
            visitedCorners.append(corner)

            if edge:
                otherTiles = (edge.tiles - [tile])
                if otherTiles:
                    otherTile = otherTiles[0]
                    if otherTile in remainingTiles:
                        otherTileS.setCenterFromEdge(edge, tSprite)

        walk_corners_along_tile(tile, visitFn)



#------------------------------------------------------------------------------
def main():

    spinner = CPUSpinnerController()
    kbController = KeyboardController()
    pygameView = PygameView()
    events.post('StartGame')
    spinner.run()

if __name__ == "__main__":
    main()
